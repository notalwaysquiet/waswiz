#-----------------------------------------------------------------------------
# Websphere 8 or 9 python configuration script properties
# H Malloy 2022

#-----------------------------------------------------------------------------
#	Server Name
#		- t1_cheetah  
#			Port: 14060
#	
# Linux Command example for user interface
# sh-5.0$ sudo /opt/IBM/wasv9/bin/wsadmin.sh -f UserInterface.py cheetah_dummy.ini 2>&1 | tee ../logs/log

#-----------------------------------------------------------------------------
# Config file format version
# The python script checks to make sure the script version matches config format version
#-----------------------------------------------------------------------------
[configInfo]
  confver = .2

#-----------------------------------------------------------------------------
# Cell general properties clause
#-----------------------------------------------------------------------------
# Information that applies to whole WAS installation or cell 
# (Assumes 1 cell per WAS installation, and 1 installation per "environment" e.g., Dev)
# There may be > 1 WAS per host machine
#-----------------------------------------------------------------------------
[cellInfo]
  # environmentNickname is used as a label when making server config archive (car) files
  #  (along with timestamp)
  environmentNickname = Plum
  
  # cell & node(s) named below must exist prior to running python script
  cellName = PlumCell01
  
  # for > 1 node, list them all in same line separated by spaces
  # (don't count DM node, just app server nodes)
  nodeList = servers1PlumNode
  
  # must supply exactly 1 hostname per nodeName in nodeList
  # for > 1 nodeHostName, list them all in same line separated by spaces
  nodeHostList = tiffin
  
  # serverConfigTemplateDir is directory where the server templates (car files) are,
  #  include trailing slash
  # specify the server template filename under server info
  # seems to work fine to use relative path, e.g., "../templates" (only tested on Linux though)
  #serverConfigTemplateDir = C:\qdr\ETP_dev\server_templates\
  #serverConfigTemplateDir = /etp/wasadmin/was_configurator/ETP_dev/server_templates/
  serverConfigTemplateDir = ../templates/
  
  # serverConfigArchiveDir is directory where to save archive (car) files for newly created servers
  #   include trailing slash
  #serverConfigArchiveDir = C:\qdr\ETP_dev\server_archives\
  serverConfigArchiveDir = ../archives/
  
  # serverConfigFileNameBase will become start of serverConfigArchive file name
  serverConfigFileNameBase = serverConfigArchive

#-----------------------------------------------------------------------------
# Virtual host clause
#   For requests via external web server only
#-----------------------------------------------------------------------------
# This info will be used to create hostname:port pairs in the virtual hosts
# For each virtual host name, specify only the values for 
#  requests that will arrive via a web server
# For clusters, values for the embedded http server will be created 
#  by the script based on offsets from the starting port for 
#  server1 of each cluster, listed under server info, not here
#  for requests that go direct to embedded http server in app server
# Only put *additional* ones here, i.e., for requests that go through web server
# If app server will not be served by a web server, don't list it here
# If virtual host is not *also* listed in server info for some server, it will 
#   not be created
#-----------------------------------------------------------------------------
# None

#-----------------------------------------------------------------------------
# Server/Cluster clause 
#-----------------------------------------------------------------------------
[server:1]
  # baseServerName doesn't have the serial num postfix, if applic.
  # so for name "server1", just put "server"
  baseServerName = t1_cheetah_server
  
  # serverConfigTemplateFilename is a zipped copy of server config -
  #  we are using them as template, i.e., a shortcut for 
  #  unvarying properties eg jvm log rolling
  # specify the dir for serverConfigTemplateFilename under cellInfo
  serverConfigTemplateFilename = all_defaults_server_v9_0_5_6

  # List of websphere nodes the server is to be created on.
  #  nodes in the list must also appear in cellInfo
  nodeList = servers1PlumNode 

  # must supply exactly 1 hostname per nodeName in nodeList
  # for > 1 nodeHostName, list them all in same line separated by spaces
  # is used in virtual host
  nodeHostList = tiffin

  # if isClustered is false, then clusterName will not be read
  isClustered = false
  clusterName = t1_cheetah_cluster

  # portRangeStart is the start of the server1PortRangeStart range to bind the application server to.
  portRangeStart = 14060
  
  # port range for server2 in same cluster will be portRangeStart + this num, added in config file v.11
  portOffsetForClusterMembers = 10000

  # if hostsWebApps is false, the virtual host named by virtualHostName will not be created
  hostsWebApps = true

  # virtualHostName is the value to give server for default vh for apps installed on it,
  #  can be overrridden during app install
  virtualHostName = t1_cheetah_server1_host
  
  # create * entry for virtual host (for non-prod environments only)
  createAsteriskHostAlias = true

#-----------------------------------------------------------------------------
# JVM custom properties clauses
#-----------------------------------------------------------------------------
# These properties will be applied to each application server 
#  where the part of the clause name after 'jvmCustomProperty:'
# matches the server name.
# There can be as many as these as required, just keep incrementing
# the numerical end field, ie i in [jvmCustomProperty:serverName:i]
# They (probably) don't need to listed in correct numerical order, but why wouldn't you?
# description field can be empty but the line must exist
#-----------------------------------------------------------------------------
[jvmCustomProperty:t1_cheetah_server:1]
  propertyName = cfgDir
  propertyValue = ${ETP_CONFIG_PATH}/${WAS_SERVER_NAME}
  propertyDescription = Default app config dir

[jvmCustomProperty:t1_cheetah_server:2]
  propertyName = log4j.configuration 
  propertyValue = file:///${ETP_CONFIG_PATH}/${WAS_SERVER_NAME}/log4j-CC-be.xml 
  propertyDescription = Log4j location for CC backend

[jvmCustomProperty:t1_cheetah_server:3]
  propertyName = bca.trainingmode 
  propertyValue = P
  propertyDescription = Commercial Click WF, Commercial Click Process  

#-----------------------------------------------------------------------------
# JVM configuration clause
# new in config file version .7
# should support any other attributes of type 'JavaVirtualMachine' not listed here, just add them on
# in versions below .12, put full server name for unclustered server, i.e., include the "1"
#-----------------------------------------------------------------------------
[jvmProcessDefinition:t1_cheetah_server]
  # jvm properties for the application server
  initialHeapSize = 256
  maximumHeapSize = 512
  verboseModeGarbageCollection = 'true'
  #debugMode = 'true'
  #genericJvmArguments = 
  #verboseModeClass = 'true'

#-----------------------------------------------------------------------------
# JVM log rolling clause
# new in config file version .7
# should support any other attributes of type 'StreamRedirect' not listed here, just add them on
# in versions below .12, put full server name for unclustered server, i.e., include the "1"
#-----------------------------------------------------------------------------
[jvmLogRolling:t1_cheetah_server]
  #rolloverType ENUM(TIME, SIZE, NONE, BOTH)
  rolloverType = SIZE
  
  #rolloverSize: integer value for log size limit, in MB
  #rolloverSize only used for rolloverType = SIZE or BOTH
  rolloverSize = 20
  
  #baseHour: integer value for time in 24-hour format for 1st log roll (I think)
  #baseHour only used for rolloverType = TIME or BOTH
  #baseHour = 
  
  #rolloverPeriod: integer value for rotation time interval, in hours
  #rolloverPeriod only used for rolloverType = TIME or BOTH
  #rolloverPeriod = 
  
  #maxNumberOfBackupFiles: integer value for Maximum Number of Historical Log Files. Number in range 1 through 200.
  maxNumberOfBackupFiles = 10
 
#-----------------------------------------------------------------------------
# Transaction service settings
# Application servers > t1_cheetah_server1 > Container Services (under Container Settings) > Transaction service 
# new in config file version .9
# should support any other attributes of type 'TransactionService' not listed here, just add them on
#-----------------------------------------------------------------------------
[transactionService:t1_cheetah_server:1]
  # Application servers > t1_cheetah_server1 > Transaction service
  # Transaction log directory 
  #transactionLogDirectory String

  # Total transaction lifetime timeout
  #totalTranLifetimeTimeout int: admin console default is 120 seconds
  totalTranLifetimeTimeout = 200

  # Async response timeout 
  #asyncResponseTimeout int: admin console default is 30 seconds

  # Client inactivity timeout 
  #clientInactivityTimeout int: admin console default is 60 seconds

  # Maximum transaction timeout 
  #maximumTransactionTimeout int: admin console default is 300 seconds

  # Heuristic retry limit 
  #heuristicRetryLimit int: admin console default is 0 retries

  # Heuristic retry wait 
  #heuristicRetryWait int: admin console default is 0 seconds
 
#-----------------------------------------------------------------------------
# Web container settings
# Application servers > t1_cheetah_server1 > Web container
# Application servers > t1_cheetah_server1 > Web container > Asynchronous Request Dispatching
# new in config file version .8
# should support any other attributes of type 'WebContainer' not listed here, just add them on
# defaultVirtualHostName is actually a WebContainer attribute but I've put it in server clause instead of here
# as that is probably where I'd look for it -- it should probably work if you put it here too, but redundant
#-----------------------------------------------------------------------------
[webContainer:t1_cheetah_server]
  #enableServletCaching boolean: admin console default is false
  enableServletCaching = true
  
  # Disable servlet request and response pooling 
  #disablePooling boolean: admin console default is false
  #disablePooling = true
  
  # ones below are for Asynchronous Request Dispatching, not used at Veda (yet?)
  #allowAsyncRequestDispatching boolean: admin console default is false
  #asyncIncludeTimeout int: admin console default is 60000 milliseconds
  #maximumPercentageExpiredEntries int: admin console default is 15%
  #maximumResponseStoreSize int: admin console default is 100MB
  
#-----------------------------------------------------------------------------
# Web container thread pool settings
# Application servers > t1_cheetah_server1 > Thread pools (under Additional Properties) > WebContainer
# new in config file version .9
# should support any other attributes of type 'ThreadPool' not listed here, just add them on
#-----------------------------------------------------------------------------
[webContainerThreadPool:t1_cheetah_server]
  #Minimum Size 
  #minimumSize int: admin console default is 50 threads
  #minimumSize =
  
  #Maximum Size 
  #maximumSize int: admin console default is 50 threads
  maximumSize = 100
  
  #Thread inactivity timeout 
  #inactivityTimeout int: admin console default is 60000 milliseconds
  #inactivityTimeout = 
  
  #Allow thread allocation beyond maximum thread size 
  #isGrowable boolean: admin console default is false
  #isGrowable =

#-----------------------------------------------------------------------------
# Datasource configuration 
#-----------------------------------------------------------------------------
# The same ds properties should be applied to every application server that will
# host an app that uses that ds.
# These are created as server-level only. 
# Recommended to not manually set any at cell- or node-level
# as we don't want to ever have to wonder whether we
# have inherited a ds from node or cell-level or are using an overridden server-level one
#-----------------------------------------------------------------------------
[dataSource:t1_cheetah_server:1]
  dataSourceName = BT Data Source
  jndiName = jdbc/bt
  authDataAlias = BT_OAT_LOGON_DB2
  description = this ds used by: BE, common
  #default statementCacheSize is 10, and most Veda datasources have 10
  statementCacheSize = 10
  #most Veda datasources should be 10 for maxConnections
  maxConnections = 50
  db2OrOracle = db2          
  # --remainder are db2-specific attributes--
  databaseServerName = etp7oatdb.corp.bayadv 
  databaseName = OAT_BT
  readOnly = false
  currentSchema = BT
  #most Veda datasources should be 'true' for retrieveMessagesFromServerOnGetMessage
  retrieveMessagesFromServerOnGetMessage = false

[dataSource:t1_cheetah_server:3]
  dataSourceName = CC
  jndiName = jdbc/cc
  authDataAlias = BT_OAT_LOGON_DB2
  description = this ds used by: one of the CC BE_apps
  #default statementCacheSize is 10, and most Veda datasources have 10
  statementCacheSize = 0
  #most Veda datasources should be 10 for maxConnections
  maxConnections = 10
  db2OrOracle = db2          
  # --remainder are db2-specific attributes--
  databaseServerName = etp7oatdb.corp.bayadv 
  databaseName = OAT_EVT
  readOnly = false
  currentSchema = CC
  #most Veda datasources should be 'true' for retrieveMessagesFromServerOnGetMessage
  retrieveMessagesFromServerOnGetMessage = false
  
[dataSourceCustomProperty:t1_cheetah_server:jdbc/cc:1]  
  #datasource custom props are optional
  dataSourceCustomPropertyName = fullyMaterializeLobData
  dataSourceCustomPropertyType = java.lang.Boolean
  dataSourceCustomPropertyValue = true
  dataSourceCustomPropertyDescription = true is the default setting

[dataSourceCustomProperty:t1_cheetah_server:jdbc/cc:2]  
  #datasource custom props are optional
  dataSourceCustomPropertyName = progressiveStreaming
  dataSourceCustomPropertyType = java.lang.String
  dataSourceCustomPropertyValue = 2
  dataSourceCustomPropertyDescription = for "Lob is closed" error; 2 is disable

[dataSourceCustomProperty:t1_cheetah_server:jdbc/cc:3]  
  #datasource custom props are optional
  # see http://www-01.ibm.com/support/docview.wss?uid=swg21190874
  # see https://www.ibm.com/support/knowledgecenter/SSAW57_8.5.5/com.ibm.websphere.nd.doc/ae/cdat_isolevel.html
  dataSourceCustomPropertyName = webSphereDefaultIsolationLevel
  dataSourceCustomPropertyType = java.lang.String
  dataSourceCustomPropertyValue = 2
  dataSourceCustomPropertyDescription = 2 is "JDBC Read committed (or TRANSACTION_READ_COMMITTED)"
   

#-----------------------------------------------------------------------------
# ------ MQ configuration -------
#-----------------------------------------------------------------------------
# Set all these at server-level
# If same queue connection factory or queue is used by multiple servers, create
#  them multiple times for each server
#-----------------------------------------------------------------------------
# Queue connection factories 
#-----------------------------------------------------------------------------
[queueConnectionFactory:t1_cheetah_server:1]  
  # Name 
  name = AlarmQueue Connectionfactory
  
  # JNDI name, prefaced by "jms/" by convention 
  jndiName = jms/AlarmQueueConnectionFactory
  
  #Description
  description = used by app(s): written by cc_be_processes (cc.failover module); read by bt-etp-message
  
  #Queue manager
  #If this queue connection factory is based on a CCDT, this property is used to 
  #  select an entry in the CCDT. Otherwise, it is the name of the queue manager 
  #  or queue sharing group to connect to. A connection is established to this 
  #  WebSphere MQ resource to send or receive messages.
  queueManager = OATETP01
  
  #Hostname. The hostname, IPv4 or IPv6 address of the WebSphere MQ queue manager to connect to.
  host = etp7oatmq.corp.bayadv
  
  #Port. The port number on which WebSphere MQ is listening. 11001 for dev, 11002 for qa0, 11003 for qa1
  port = 11006
  
  #Server connection channel. The WebSphere MQ server connection channel name used when 
  #  connecting to WebSphere MQ.
  # default: SYSTEM.DEF.SVRCONN
  channel  = OATETP01.SVRCONN.1
  
  #Support distributed two phase commit protocol. Default: checked. Keep this option selected if transactions involve other resources, including other queues or topics. Clear this option only when you are certain that the queue manager connected to using this queue connection factory is the only resource in the transaction. 
  XAEnabled = true  
  
  #The WebSphere MQ transport type for the connection. This is used to determine the exact mechanisms used to connect to WebSphere MQ.
  #Default: bindings then client 
  #24/8/2010: It appears that when MQ is on the same host as WAS, the default setting does not work. Must use CLIENT.
  transportType = CLIENT
  
  #The 14 properties below apply to QCF connection pool or QCF session pool, as specified.
  #Defaults set by wsadmin do not match admin-console defaults. My script fixes them up
  #  after qcf is created to match admin-console defaults.
  #Override default pool settings here if desired. 
  #Leaving blank leaves them as default, so no need to comment out if not overriding
  
  ###connectionConnectionTimeout is the interval, in seconds, after which a connection request times out and a
  #  ConnectionWaitTimeoutException is thrown.
  ###This value indicates the number of seconds that a connection request waits when there are no connections available in the free pool
  #  and no new connections can be created. This usually occurs because the maximum value of connections in the particular connection
  #  pool has been reached.
  # Default: 180 seconds 
  connectionConnectionTimeout = 1800
  
  #connectionMaxConnections is the maximum number of physical connections that you can create in this pool. 
  ###These are the physical connections to the backend resource. Once this number is reached, no new physical
  #  connections are created and the requester waits until a physical connection that is currently in use returns to
  #  the pool, or a ConnectionWaitTimeoutException is thrown. For example: If the Max Connections value is set to 5,
  #  and there are five physical connections in use, the pool manager waits for the amount of time specified in
  #  Connection Timeout for a physical connection to become free.
  #default: 10 connections
  connectionMaxConnections = 10
  
  #connectionMinConnections is the minimum number of physical connections to maintain.
  ###If the size of the connection pool is at or below the minimum connection pool size, the Unused Timeout thread
  #  does not discard physical connections. However, the pool does not create connections solely to ensure that the
  #  minimum connection pool size is maintained. Also, if you set a value for Aged Timeout, connections with an
  #  expired age are discarded, regardless of the minimum pool size setting. 
  #default: 1 connection
  connectionMinConnections = 0
  
  #connectionReapTime is the interval, in seconds, between runs of the pool maintenance thread.
  ##The Reap Time interval affects the accuracy of the Unused Timeout and Aged Timeout settings. 
  #  The smaller the interval, the greater the accuracy. If the pool maintenance thread is enabled, 
  #  set the Reap Time value less than the values of Unused Timeout and Aged Timeout. When the pool maintenance thread runs, 
  #  it discards any connections remaining unused for longer than the time value specified in Unused Timeout, 
  #  until it reaches the number of connections specified in Minimum Connections. The pool maintenance thread 
  #  also discards any connections that remain active longer than the time value specified in Aged Timeout.
  ##The Reap Time interval also affects performance. Smaller intervals mean that the pool maintenance thread 
  #  runs more often and degrades performance.
  ##To disable the pool maintenance thread set Reap Time to 0, or set both Unused Timeout and Aged Timeout to 0. 
  #  The **recommended way** to disable the pool maintenance thread is to set Reap Time to 0, 
  #  in which case Unused Timeout and Aged Timeout are ignored. 
  ##If only Unused Timeout and Aged Timeout are set to 0, the pool maintenance thread runs. 
  #  Physical connections which timeout due to non-zero timeout values are discarded as well as those 
  #  connections that reside in a used pool (or shared pool) because they have been held longer than the 
  #  time interval set for Aged Timeout
  #default: 180 seconds (3 minutes)
  connectionReapTime = 180
  
  #connectionUnusedTimeout is the interval in seconds after which an unused or idle connection is discarded.
  ##Set the Unused Timeout value higher than the Reap Timeout value for optimal performance. 
  #  Unused physical connections are only discarded if the current number of connections exceeds the 
  #  Minimum Connections setting. For example, if the unused timeout value is set to 120, and the pool 
  #  maintenance thread is enabled (Reap Time is not 0), any physical connection that remains unused for 
  #  two minutes is discarded.
  ##The accuracy and performance of this timeout are affected by the Reap Time value. See Reap time for more information.
  #default: 1800 seconds (30 minutes)
  connectionUnusedTimeout = 1800

  #connectionAgedTimeout is the interval in seconds before a physical connection is discarded.
  ##Setting Aged Timeout to 0 supports active physical connections remaining in the pool indefinitely. 
  #  Set the Aged Timeout value higher than the Reap Timeout value for optimal performance, but Aged Timeout 
  #  should only be used if necessary.
  ##For most resource adapters, Aged Timeout should be set to 0. Aged Timeout should only be used when it is known 
  #  that a managed connection will go stale. For example, an IMS managed connection will stop working after its 
  #  native log reaches a limit for this managed connection. If the log runs out of space in 30 minutes, you should 
  #  set Aged Timeout to 25 minutes. This allows for cleanup of the managed connection and the backend resources are freed. 
  ##Another example is if the Aged Timeout value is set to 1200, and the Reap Time value is not 0, any physical connection 
  #  that remains in existence for 1200 seconds (20 minutes) is discarded from the pool. The only exception is if the 
  #  connection is involved in a transaction when the aged timeout is reached, the application server will not discard the 
  #  connection until after the transaction is completed and the connection is closed.
  ##The accuracy and performance of this timeout are affected by the Reap Time value. See Reap time for more information.
  #default: 0 seconds (active connections do not timeout)
  connectionAgedTimeout = 1800
  
  #connectionPurgePolicy is how to purge connections when a stale connection or fatal connection error is detected. 
  ##Valid values are EntirePool and FailingConnectionOnly.
  ##EntirePool: All connections in the pool are marked stale. Any connection not in use is immediately closed. 
  #  A connection in use is closed and issues a stale connection Exception during the next operation on that connection. 
  #  Subsequent getConnection() requests from the application result in new connections to the database opening. 
  #  When using this purge policy, there is a slight possibility that some connections in the pool are closed 
  #  unnecessarily when they are not stale. However, this is a rare occurrence. In most cases, a purge policy of 
  #  EntirePool is the best choice.
  ##FailingConnectionOnly: Only the connection that caused the stale connection exception is closed. 
  #  Although this setting eliminates the possibility that valid connections are closed unnecessarily, 
  #  it makes recovery from an application perspective more complicated. Because only the currently failing 
  #  connection is closed, there is a good possibility that the next getConnection() request from the application 
  #  can return a connection from the pool that is also stale, resulting in more stale connection exceptions.
  ##The connection pretest function attempts to insulate an application from pooled connections that are not valid. 
  #  When a backend resource, such as a database, goes down, pooled connections that are not valid might exist 
  #  in the free pool. This is especially true when the purge policy is failingConnectionOnly; in this case, 
  #  the failing connection is removed from the pool. Depending on the failure, the remaining connections in the 
  #  pool might not be valid.
  #default: EntirePool
  connectionPurgePolicy = EntirePool
  
# session pool props

  ###sessionConnectionTimeout is the interval, in seconds, after which a connection request times out and a
  #  ConnectionWaitTimeoutException is thrown.
  ###This value indicates the number of seconds that a connection request waits when there are no connections available in the free pool
  #  and no new connections can be created. This usually occurs because the maximum value of connections in the particular connection
  #  pool has been reached.
  # Default: 180 seconds 
  sessionConnectionTimeout = 1800
  
  #sessionMaxConnections is the maximum number of physical connections that you can create in this pool. 
  ###These are the physical connections to the backend resource. Once this number is reached, no new physical
  #  connections are created and the requester waits until a physical connection that is currently in use returns to
  #  the pool, or a ConnectionWaitTimeoutException is thrown. For example: If the Max Connections value is set to 5,
  #  and there are five physical connections in use, the pool manager waits for the amount of time specified in
  #  Connection Timeout for a physical connection to become free.
  #default: 10 connections
  sessionMaxConnections = 10
  
  #sessionMinConnections is the minimum number of physical connections to maintain.
  ###If the size of the connection pool is at or below the minimum connection pool size, the Unused Timeout thread
  #  does not discard physical connections. However, the pool does not create connections solely to ensure that the
  #  minimum connection pool size is maintained. Also, if you set a value for Aged Timeout, connections with an
  #  expired age are discarded, regardless of the minimum pool size setting. 
  #default: 1 connection
  sessionMinConnections = 0
 
  #sessionReapTime is the interval, in seconds, between runs of the pool maintenance thread.
  ##The Reap Time interval affects the accuracy of the Unused Timeout and Aged Timeout settings. 
  #  The smaller the interval, the greater the accuracy. If the pool maintenance thread is enabled, 
  #  set the Reap Time value less than the values of Unused Timeout and Aged Timeout. When the pool maintenance thread runs, 
  #  it discards any connections remaining unused for longer than the time value specified in Unused Timeout, 
  #  until it reaches the number of connections specified in Minimum Connections. The pool maintenance thread 
  #  also discards any connections that remain active longer than the time value specified in Aged Timeout.
  ##The Reap Time interval also affects performance. Smaller intervals mean that the pool maintenance thread 
  #  runs more often and degrades performance.
  ##To disable the pool maintenance thread set Reap Time to 0, or set both Unused Timeout and Aged Timeout to 0. 
  #  The **recommended way** to disable the pool maintenance thread is to set Reap Time to 0, 
  #  in which case Unused Timeout and Aged Timeout are ignored. 
  #  If only Unused Timeout and Aged Timeout are set to 0, the pool maintenance thread runs. 
  #  Physical connections which timeout due to non-zero timeout values are discarded as well as those 
  #  connections that reside in a used pool (or shared pool) because they have been held longer than the 
  #  time interval set for Aged Timeout
  #default: 180 seconds (3 minutes)
  sessionReapTime = 10
  
  #sessionUnusedTimeout is the interval in seconds after which an unused or idle connection is discarded.
  ##Set the Unused Timeout value higher than the Reap Timeout value for optimal performance. 
  #  Unused physical connections are only discarded if the current number of connections exceeds the 
  #  Minimum Connections setting. For example, if the unused timeout value is set to 120, and the pool 
  #  maintenance thread is enabled (Reap Time is not 0), any physical connection that remains unused for 
  #  two minutes is discarded.
  ##The accuracy and performance of this timeout are affected by the Reap Time value. See Reap time for more information.
  #default: 1800 seconds (30 minutes)
  sessionUnusedTimeout = 1800

  #sessionAgedTimeout is the interval in seconds before a physical connection is discarded.
  ##Setting Aged Timeout to 0 supports active physical connections remaining in the pool indefinitely. 
  #  Set the Aged Timeout value higher than the Reap Timeout value for optimal performance, but Aged Timeout 
  #  should only be used if necessary.
  ##For most resource adapters, Aged Timeout should be set to 0. Aged Timeout should only be used when it is known 
  #  that a managed connection will go stale. For example, an IMS managed connection will stop working after its 
  #  native log reaches a limit for this managed connection. If the log runs out of space in 30 minutes, you should 
  #  set Aged Timeout to 25 minutes. This allows for cleanup of the managed connection and the backend resources are freed. 
  ##Another example is if the Aged Timeout value is set to 1200, and the Reap Time value is not 0, any physical connection 
  #  that remains in existence for 1200 seconds (20 minutes) is discarded from the pool. The only exception is if the 
  #  connection is involved in a transaction when the aged timeout is reached, the application server will not discard the 
  #  connection until after the transaction is completed and the connection is closed.
  ##The accuracy and performance of this timeout are affected by the Reap Time value. See Reap time for more information.
  #default: 0 seconds (active connections do not timeout)
  sessionAgedTimeout = 1800
  
  #sessionPurgePolicy is how to purge connections when a stale connection or fatal connection error is detected. 
  ##Valid values are EntirePool and FailingConnectionOnly.
  ##EntirePool: All connections in the pool are marked stale. Any connection not in use is immediately closed. 
  #  A connection in use is closed and issues a stale connection Exception during the next operation on that connection. 
  #  Subsequent getConnection() requests from the application result in new connections to the database opening. 
  #  When using this purge policy, there is a slight possibility that some connections in the pool are closed 
  #  unnecessarily when they are not stale. However, this is a rare occurrence. In most cases, a purge policy of 
  #  EntirePool is the best choice.
  ##FailingConnectionOnly: Only the connection that caused the stale connection exception is closed. 
  #  Although this setting eliminates the possibility that valid connections are closed unnecessarily, 
  #  it makes recovery from an application perspective more complicated. Because only the currently failing 
  #  connection is closed, there is a good possibility that the next getConnection() request from the application 
  #  can return a connection from the pool that is also stale, resulting in more stale connection exceptions.
  ##The connection pretest function attempts to insulate an application from pooled connections that are not valid. 
  #  When a backend resource, such as a database, goes down, pooled connections that are not valid might exist 
  #  in the free pool. This is especially true when the purge policy is failingConnectionOnly; in this case, 
  #  the failing connection is removed from the pool. Depending on the failure, the remaining connections in the 
  #  pool might not be valid.
  #default: FailingConnectionOnly
  sessionPurgePolicy = EntirePool  

#-----------------------------------------------------------------------------
# ---------- Queues ----------
#-----------------------------------------------------------------------------
[queue:t1_cheetah_server:1]  
  #name: The name by which this queue is known for administrative purposes within WebSphere Application Server.
  name = AlarmQueue
 
  #Description 
  description = used by app(s): written by cc_be_processes (cc.failover module); read by bt-etp-message

  #jndiName: As a convention, use the fully qualified JNDI name; for example, in the form jms/Name, where Name is the logical name of the resource.
  jndiName = jms/AlarmQueue
  
  #Queue name: The WebSphere MQ name for the queue that holds the messages for the JMS destination.
  baseQueueName = OAT1.ETP.ALARM
  
  #Queue manager or queue sharing group name: The name of the WebSphere MQ queue manager or queue sharing group where the queue resides. 
  baseQueueManagerName = OATETP01
  
  ## The following 3 attributes are NECESSARY in order to configure backout queue in WAS admin console

  ##  Queues > (queue name) > WebSphere MQ connection properties
  #Hostname. The hostname, IPv4 or IPv6 address of the WebSphere MQ queue manager to connect to.
  queueManagerHost = etp7oatmq.corp.bayadv

  ##  Queues > (queue name) > WebSphere MQ connection properties
  #Port. The port number on which WebSphere MQ is listening.11001 for dev, 11001 for qa
  queueManagerPort = 11006
  
  ##  Queues > (queue name) > WebSphere MQ connection properties  
  #Server connection channel. The WebSphere MQ server connection channel name used when 
  #  connecting to WebSphere MQ.
  # default: SYSTEM.DEF.SVRCONN
  serverConnectionChannelName  = OATETP01.SVRCONN.1
  
#-----------------------------------------------------------------------------  
# JMS activation specs 
#-----------------------------------------------------------------------------
#  are from  Java™ EE Connector Architecture (JCA) 1.5  
#  sort of combines together the idea of listener port + queueConnectionFactory
# will be created at cluster level if server is clustered; server level otherwise
#-----------------------------------------------------------------------------
[jmsActivationSpec:t1_cheetah_server:1]  
  # activationSpecname.The name by which this activation specification is known for administrative purposes within WebSphere Application Server. 
  activationSpecName = EventMessageBeanPort
  
  # The JNDI name that is used to bind the activation specification into the JNDI name space.
  # As a convention, use the fully qualified JNDI name; for example, in the form jms/Name, where Name is the logical name of the resource.
  jndiName = jms/EventMessageBeanPort
  
   # A description of this activation specification for administrative purposes within WebSphere Application Server. 
  description = used by app(s): bt-etp-message
  
  # destinationJndiName. The JNDI name of a WMQ JMS RA queue or topic type destination. When an MDB is deployed with this activation specification, it is this destination that messages for the MDB will be consumed from. 
  # can be overridden at deployment time 
  destinationJndiName = jms/EtpMessageQueue
  
  # destinationType. Options are queue or topic
  destinationType = javax.jms.Queue
  
  # queue manager. Name of the queue manager or queue sharing group to connect to. 
  # A connection is established to this WebSphere MQ resource to receive messages
  qmgrName = OATETP01
  
  # qmgrHostname. The hostname, IPv4 or IPv6 address of the WebSphere MQ queue manager to connect to. 
  qmgrHostname = etp7oatmq.corp.bayadv
  
  # qmgrPortNumber. The TCP/IP port number used for connection to the WebSphere MQ queue manager, for client connection only. 
  qmgrPortNumber = 11006
  
  # qmgrSvrconnChannel. The WebSphere MQ server connection channel name used when connecting to WebSphere MQ. 
  # Default SYSTEM.DEF.SVRCONN 
  qmgrSvrconnChannel = OATETP01.SVRCONN.1

  # Transport. The WebSphere MQ transport type for the connection. Option always used at Veda: CLIENT
  # client: Use a TCP/IP based network connection to communicate with the WebSphere MQ queue manager. 
  # bindings then client: Attempt a bindings mode connection to the queue manager. If this is not possible, revert to the client transport. 
  # bindings: Establish a cross memory connection to a queue manager running on the same node.  Port & other values used are default only
  wmqTransportType = CLIENT

#-----------------------------------------------------------------------------
#HTTP Session replication 
#-----------------------------------------------------------------------------
# none

